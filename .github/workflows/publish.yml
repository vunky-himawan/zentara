name: CI/CD Pipeline

on:
  # PR ke develop dan main - hanya build-test
  pull_request:
    branches: [develop, main]
  
  # Push/merge ke develop - build-test + publish-beta
  push:
    branches: [develop, main]
  
  # Manual action untuk publish production
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      custom_version:
        description: 'Custom version (optional, overrides version_type)'
        required: false
        type: string

permissions:
  contents: write
  packages: write
  pull-requests: read

jobs:
  # Job 1: Build dan Test (selalu jalan)
  build-test:
    runs-on: ubuntu-latest
    outputs:
      should-publish-beta: ${{ steps.check-conditions.outputs.should-publish-beta }}
      should-publish-prod: ${{ steps.check-conditions.outputs.should-publish-prod }}
      branch-name: ${{ steps.check-conditions.outputs.branch-name }}
      event-type: ${{ steps.check-conditions.outputs.event-type }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check deployment conditions
        id: check-conditions
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Base ref: ${{ github.base_ref }}"
          
          # Determine if should publish beta (push to develop)
          SHOULD_PUBLISH_BETA="false"
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/develop" ]]; then
            SHOULD_PUBLISH_BETA="true"
          fi
          
          # Determine if should publish prod (manual dispatch)
          SHOULD_PUBLISH_PROD="false"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            SHOULD_PUBLISH_PROD="true"
          fi
          
          echo "should-publish-beta=$SHOULD_PUBLISH_BETA" >> $GITHUB_OUTPUT
          echo "should-publish-prod=$SHOULD_PUBLISH_PROD" >> $GITHUB_OUTPUT
          echo "branch-name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "event-type=${{ github.event_name }}" >> $GITHUB_OUTPUT
          
          echo "🔍 Conditions:"
          echo "  - Should publish beta: $SHOULD_PUBLISH_BETA"
          echo "  - Should publish prod: $SHOULD_PUBLISH_PROD"
          echo "  - Branch: ${{ github.ref_name }}"
          echo "  - Event: ${{ github.event_name }}"
      
      - uses: pnpm/action-setup@v2
        with:
          version: 10.11.1
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Run checks
        run: pnpm check
      
      - name: Run tests
        run: |
          if find . -type f \( -name "*.test.ts" -o -name "*.spec.ts" \) | grep -q .; then
            echo "🧪 Running tests..."
            pnpm test
          else
            echo "⚠️ No test files found, skipping tests"
          fi
      
      - name: Build project
        run: |
          echo "🏗️ Building project..."
          pnpm build
      
      - name: Upload build artifacts
        if: steps.check-conditions.outputs.should-publish-beta == 'true' || steps.check-conditions.outputs.should-publish-prod == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/
          retention-days: 1
      
      - name: Build summary
        run: |
          echo "## 🎯 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ steps.check-conditions.outputs.event-type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ steps.check-conditions.outputs.branch-name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Will publish beta**: ${{ steps.check-conditions.outputs.should-publish-beta }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Will publish prod**: ${{ steps.check-conditions.outputs.should-publish-prod }}" >> $GITHUB_STEP_SUMMARY

  # Job 2: Publish Beta (hanya jika push ke develop)
  publish-beta:
    needs: build-test
    if: needs.build-test.outputs.should-publish-beta == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: pnpm/action-setup@v2
        with:
          version: 10.11.1
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/
      
      - name: Setup npm registry
        run: |
          echo "@vunky-himawan:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Disable husky in CI
        run: git config core.hooksPath /dev/null

      - name: Bump beta version
        run: |
          npm version prerelease --preid=beta --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "BETA_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "📦 New beta version: $NEW_VERSION"
      
      - name: Publish beta
        run: pnpm publish --tag beta --no-git-checks
      
      - name: Commit & tag beta
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: release beta ${{ env.BETA_VERSION }}"
          git tag "v${{ env.BETA_VERSION }}"
          git push origin develop --tags

      - name: Beta summary
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          echo "## 🚀 Beta Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: \`$PACKAGE_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ env.BETA_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: \`beta\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`develop\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Installation Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Install beta version" >> $GITHUB_STEP_SUMMARY
          echo "npm install $PACKAGE_NAME@${{ env.BETA_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Or install latest beta" >> $GITHUB_STEP_SUMMARY
          echo "npm install $PACKAGE_NAME@beta" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Package on GitHub](https://github.com/${{ github.repository }}/packages)" >> $GITHUB_STEP_SUMMARY
          echo "- [Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Tag v${{ env.BETA_VERSION }}](https://github.com/${{ github.repository }}/releases/tag/v${{ env.BETA_VERSION }})" >> $GITHUB_STEP_SUMMARY

  # Job 3: Publish Production (hanya manual dispatch)
  publish-production:
    needs: build-test
    if: needs.build-test.outputs.should-publish-prod == 'true'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: main
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: pnpm/action-setup@v2
        with:
          version: 10.11.1
      
      - uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://npm.pkg.github.com/
          cache: "pnpm"
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/
      
      - name: Setup npm registry
        run: |
          echo "@vunky-himawan:registry=https://npm.pkg.github.com" > .npmrc
          echo "//npm.pkg.github.com/:_authToken=${NPM_TOKEN}" >> .npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Disable husky in CI
        run: git config core.hooksPath /dev/null
      
      - name: Bump production version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            npm version "${{ github.event.inputs.custom_version }}" --no-git-tag-version
          else
            npm version ${{ github.event.inputs.version_type }} --no-git-tag-version
          fi
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "📦 New production version: $NEW_VERSION"
      
      - name: Publish production
        run: pnpm publish --tag latest --no-git-checks
      
      - name: Commit & tag production
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json
          git commit -m "chore: release ${{ env.NEW_VERSION }}"
          git tag "v${{ env.NEW_VERSION }}"
          git push origin main --tags
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Production summary
        run: |
          PACKAGE_NAME=$(node -p "require('./package.json').name")
          PREVIOUS_VERSION=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null | sed 's/^v//' || echo "N/A")
          echo "## 🎉 Production Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Package Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Package**: \`$PACKAGE_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version**: \`${{ env.NEW_VERSION }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version**: \`$PREVIOUS_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Type**: \`${{ github.event.inputs.version_type || 'custom' }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag**: \`latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Registry**: GitHub Packages" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: \`main\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📥 Installation Commands" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "# Install specific version" >> $GITHUB_STEP_SUMMARY
          echo "npm install $PACKAGE_NAME@${{ env.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Install latest version" >> $GITHUB_STEP_SUMMARY
          echo "npm install $PACKAGE_NAME@latest" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "# Update existing installation" >> $GITHUB_STEP_SUMMARY
          echo "npm update $PACKAGE_NAME" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Links" >> $GITHUB_STEP_SUMMARY
          echo "- [📋 GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ env.NEW_VERSION }})" >> $GITHUB_STEP_SUMMARY
          echo "- [📦 Package on GitHub](https://github.com/${{ github.repository }}/packages)" >> $GITHUB_STEP_SUMMARY
          echo "- [🔍 Compare Changes](https://github.com/${{ github.repository }}/compare/v$PREVIOUS_VERSION...v${{ env.NEW_VERSION }})" >> $GITHUB_STEP_SUMMARY
          echo "- [💾 Commit](https://github.com/${{ github.repository }}/commit/${{ github.sha }})" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ℹ️ Additional Information" >> $GITHUB_STEP_SUMMARY
          echo "- Release notes have been automatically generated" >> $GITHUB_STEP_SUMMARY
          echo "- Package is now available on GitHub Packages registry" >> $GITHUB_STEP_SUMMARY
          echo "- Tagged commit has been pushed to main branch" >> $GITHUB_STEP_SUMMARY