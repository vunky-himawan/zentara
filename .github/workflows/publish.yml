name: CI/CD Pipeline
on:
  push:
    branches:
      - develop
      - main
  pull_request:
    branches:
      - develop
      - main

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.11.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint and check formatting (Biome)
        run: pnpm check

      - name: Run tests
        run: pnpm test

      - name: Build library
        run: pnpm build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/
          retention-days: 1

  publish-dev:
    needs: build-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://npm.pkg.github.com/
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.11.1

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create beta version
        run: |
          # Buat version dengan suffix beta dan timestamp
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          BETA_VERSION="${CURRENT_VERSION}-beta.${TIMESTAMP}"
          npm version $BETA_VERSION --no-git-tag-version
          echo "BETA_VERSION=$BETA_VERSION" >> $GITHUB_ENV

      - name: Publish beta to GitHub Packages
        run: pnpm publish --tag beta --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create development tag
        run: |
          git add package.json
          git commit -m "chore: create beta version ${{ env.BETA_VERSION }}"
          git tag "v${{ env.BETA_VERSION }}"
          git push origin develop --tags

  publish-prod:
    needs: build-test
    runs-on: ubuntu-latest
    # Publish production version ketika merge ke main
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          registry-url: https://npm.pkg.github.com/
          cache: "pnpm"

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-files-${{ github.sha }}
          path: dist/

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version bump type
        id: version-bump
        run: |
          # Cek commit messages untuk menentukan jenis version bump
          COMMITS=$(git log --oneline $(git describe --tags --abbrev=0)..HEAD 2>/dev/null || git log --oneline)

          if echo "$COMMITS" | grep -qiE "BREAKING CHANGE|major:"; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -qiE "feat:|feature:|minor:"; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      - name: Bump production version
        run: |
          npm version ${{ steps.version-bump.outputs.bump }} --no-git-tag-version
          VERSION=$(node -p "require('./package.json').version")
          echo "PROD_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Publish production to GitHub Packages
        run: pnpm publish --tag latest --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create production tag and release
        run: |
          git add package.json
          git commit -m "chore: release version v${{ env.PROD_VERSION }}"
          git tag "v${{ env.PROD_VERSION }}"
          git push origin main --tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PROD_VERSION }}
          release_name: Release v${{ env.PROD_VERSION }}
          body: |
            ## Changes in v${{ env.PROD_VERSION }}

            Auto-generated release from main branch.

            ### Installation
            ```bash
            pnpm add @vunky-himawan/zentara
            # or for beta version
            pnpm add @vunky-himawan/zentara@beta
            ```
          draft: false
          prerelease: false

  notification:
    needs: [build-test, publish-dev, publish-prod]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify deployment status
        run: |
          if [[ "${{ needs.build-test.result }}" == "success" ]]; then
            echo "✅ Build and test passed"
          else
            echo "❌ Build and test failed"
          fi

          if [[ "${{ needs.publish-dev.result }}" == "success" ]]; then
            echo "✅ Beta version published to develop"
          elif [[ "${{ needs.publish-dev.result }}" == "skipped" ]]; then
            echo "⏭️ Beta publish skipped (not develop branch)"
          else
            echo "❌ Beta publish failed"
          fi

          if [[ "${{ needs.publish-prod.result }}" == "success" ]]; then
            echo "✅ Production version published to main"
          elif [[ "${{ needs.publish-prod.result }}" == "skipped" ]]; then
            echo "⏭️ Production publish skipped (not main branch)"
          else
            echo "❌ Production publish failed"
          fi
